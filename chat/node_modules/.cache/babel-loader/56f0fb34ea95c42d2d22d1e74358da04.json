{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\NOYON\\\\projects\\\\Chat-Application\\\\chat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\NOYON\\\\projects\\\\Chat-Application\\\\chat\\\\src\\\\components\\\\partials\\\\ThreadView.js\";\nimport React, { Component } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Message from './Message';\n\nclass ThreadView extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.init = () => {\n      let currentThread = this.props.threads.filter(t => t.id === this.props.match.params.threadId)[0];\n\n      if (currentThread && this.props.socket.readyState) {\n        let skip = currentThread.Messages || 0;\n        this.props.socket.send(JSON.stringify({\n          type: 'THREAD_LOAD',\n          data: {\n            threadId: this.props.match.params.threadId,\n            skip: skip\n          }\n        }));\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate(props) {\n    if (props.match.params.threadId !== this.props.match.params.threadId) {\n      this.init();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main-view\",\n      id: \"main-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, this.props.threads.filter(thread => thread.id === this.props.match.params.threadId).map((thread, i) => {\n      return React.createElement(\"div\", {\n        className: \"message-container\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, thread.Messages.map((msg, mi) => {\n        return React.createElement(Message, {\n          msg: msg,\n          key: mi,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        });\n      }));\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => _objectSpread({}, state.auth, {}, state.chat);\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ThreadView));","map":{"version":3,"sources":["C:/Users/NOYON/projects/Chat-Application/chat/src/components/partials/ThreadView.js"],"names":["React","Component","withRouter","Link","connect","Message","ThreadView","init","currentThread","props","threads","filter","t","id","match","params","threadId","socket","readyState","skip","Messages","send","JSON","stringify","type","data","componentDidMount","componentDidUpdate","render","thread","map","i","msg","mi","mapStateToProps","state","auth","chat","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,UAAR,EAAoBC,IAApB,QAA+B,kBAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAkC;AAAA;AAAA;;AAAA,SAW9BM,IAX8B,GAWvB,MAAM;AACT,UAAIC,aAAa,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,CAA0BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC,QAAhE,EAA0E,CAA1E,CAApB;;AACA,UAAGR,aAAa,IAAI,KAAKC,KAAL,CAAWQ,MAAX,CAAkBC,UAAtC,EAAiD;AAC7C,YAAIC,IAAI,GAAGX,aAAa,CAACY,QAAd,IAA0B,CAArC;AACA,aAAKX,KAAL,CAAWQ,MAAX,CAAkBI,IAAlB,CAAuBC,IAAI,CAACC,SAAL,CAAe;AAClCC,UAAAA,IAAI,EAAE,aAD4B;AAElCC,UAAAA,IAAI,EAAE;AACFT,YAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC,QADhC;AAEFG,YAAAA,IAAI,EAAEA;AAFJ;AAF4B,SAAf,CAAvB;AAOH;AACJ,KAvB6B;AAAA;;AAE9BO,EAAAA,iBAAiB,GAAE;AACf,SAAKnB,IAAL;AACH;;AACDoB,EAAAA,kBAAkB,CAAClB,KAAD,EAAO;AACrB,QAAGA,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBC,QAAnB,KAAgC,KAAKP,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC,QAA3D,EAAoE;AAChE,WAAKT,IAAL;AACH;AACJ;;AAgBDqB,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,EAAE,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnB,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,CAA0BkB,MAAM,IAAIA,MAAM,CAAChB,EAAP,KAAc,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC,QAA1E,EAAoFc,GAApF,CAAwF,CAACD,MAAD,EAASE,CAAT,KAAe;AACpG,aACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,QAAA,GAAG,EAAEA,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKF,MAAM,CAACT,QAAP,CAAgBU,GAAhB,CAAoB,CAACE,GAAD,EAAMC,EAAN,KAAa;AAC9B,eACI,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAED,GAAd;AAAmB,UAAA,GAAG,EAAEC,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,OAJA,CADL,CADJ;AASH,KAVA,CADL,CADJ;AAeH;;AAzC6B;;AA4ClC,MAAMC,eAAe,GAAGC,KAAK,sBACtBA,KAAK,CAACC,IADgB,MAEtBD,KAAK,CAACE,IAFgB,CAA7B;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK,EAAL,CAAnC;;AAIA,eAAenC,OAAO,CAClB8B,eADkB,EAElBI,kBAFkB,CAAP,CAGbpC,UAAU,CAACI,UAAD,CAHG,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport {withRouter, Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport Message from './Message';\r\n\r\nclass ThreadView extends Component{\r\n\r\n    componentDidMount(){\r\n        this.init();\r\n    }\r\n    componentDidUpdate(props){\r\n        if(props.match.params.threadId !== this.props.match.params.threadId){\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    init = () => {\r\n        let currentThread = this.props.threads.filter(t => t.id === this.props.match.params.threadId)[0];\r\n        if(currentThread && this.props.socket.readyState){\r\n            let skip = currentThread.Messages || 0;\r\n            this.props.socket.send(JSON.stringify({\r\n                type: 'THREAD_LOAD',\r\n                data: {\r\n                    threadId: this.props.match.params.threadId,\r\n                    skip: skip\r\n                    }\r\n            }))\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main-view\" id=\"main-view\">\r\n                {this.props.threads.filter(thread => thread.id === this.props.match.params.threadId).map((thread, i) => {\r\n                    return(\r\n                        <div className=\"message-container\" key={i}>\r\n                            {thread.Messages.map((msg, mi) => {\r\n                                return(\r\n                                    <Message msg={msg} key={mi} />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.auth,\r\n    ...state.chat\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    \r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withRouter(ThreadView));"]},"metadata":{},"sourceType":"module"}