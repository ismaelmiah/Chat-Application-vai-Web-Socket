{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "s1"
  },
  "basePath": "/api",
  "paths": {
    "/Users/{id}/accessTokens/{fk}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a related item by id for accessTokens.",
        "operationId": "User.prototype.__findById__accessTokens",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for accessTokens",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a related item by id for accessTokens.",
        "operationId": "User.prototype.__destroyById__accessTokens",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for accessTokens",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a related item by id for accessTokens.",
        "operationId": "User.prototype.__updateById__accessTokens",
        "parameters": [
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for accessTokens",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/accessTokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Queries accessTokens of User.",
        "operationId": "User.prototype.__get__accessTokens",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a new instance in accessTokens of this model.",
        "operationId": "User.prototype.__create__accessTokens",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes all accessTokens of this model.",
        "operationId": "User.prototype.__delete__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/accessTokens/count": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Counts accessTokens of User.",
        "operationId": "User.prototype.__count__accessTokens",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "User.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "User.upsert__put_Users",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "User.upsert__patch_Users",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "User.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/replaceOrCreate": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "User.replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/upsertWithWhere": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "User.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/exists": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "User.exists__get_Users_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}": {
      "head": {
        "tags": [
          "User"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "User.exists__head_Users_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "User.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "User.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "User.prototype.updateAttributes__put_Users_{id}",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "User.prototype.updateAttributes__patch_Users_{id}",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/replace": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "User.replaceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/findOne": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "User.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/update": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "User.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/count": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "User.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/change-stream": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a change stream.",
        "operationId": "User.createChangeStream__post_Users_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Create a change stream.",
        "operationId": "User.createChangeStream__get_Users_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login a user with username/email and password.",
        "operationId": "User.login",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Related objects to include in the response. See the description of return value for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n\n",
              "type": "object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logout a user with access token.",
        "operationId": "User.logout",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/confirm": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Confirm a user registration with email verification token.",
        "operationId": "User.confirm",
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/reset": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset password for a user with email.",
        "operationId": "User.resetPassword",
        "parameters": [
          {
            "name": "options",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Notes": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "Note.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "Note.upsert__put_Notes",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Note"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "Note.upsert__patch_Notes",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Note.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Note"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/replaceOrCreate": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Note.replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/upsertWithWhere": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "Note.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}/exists": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Note.exists__get_Notes_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}": {
      "head": {
        "tags": [
          "Note"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Note.exists__head_Notes_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Note.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Note"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "Note.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Note.prototype.updateAttributes__put_Notes_{id}",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Note"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "PersistedModel id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Note"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Note.prototype.updateAttributes__patch_Notes_{id}",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Note"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "PersistedModel id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}/replace": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Note.replaceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/findOne": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "Note.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/update": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "Note.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/count": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Note.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Notes/change-stream": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Create a change stream.",
        "operationId": "Note.createChangeStream__post_Notes_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Create a change stream.",
        "operationId": "Note.createChangeStream__get_Notes_change-stream",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "Note"
    }
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml",
    "text/xml"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "text/xml",
    "application/javascript",
    "text/javascript"
  ],
  "definitions": {
    "x-any": {
      "properties": {}
    },
    "AccessToken": {
      "properties": {
        "id": {
          "type": "string"
        },
        "ttl": {
          "default": 1209600,
          "description": "time to live in seconds (2 weeks by default)",
          "type": "number",
          "format": "double"
        },
        "created": {
          "type": "string",
          "format": "date"
        },
        "userId": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "User": {
      "properties": {
        "realm": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "credentials": {
          "type": "object"
        },
        "challenges": {
          "type": "object"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "email"
      ],
      "additionalProperties": false
    },
    "Note": {
      "properties": {
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    }
  }
}